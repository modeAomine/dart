import 'package:postgres/postgres.dart';

class DatabaseService {
  static PostgreSQLConnection? _connection;
  static bool _isInitialized = false;

  static Future<PostgreSQLConnection> get connection async {
    if (!_isInitialized) {
      await initialize();
    }
    return _connection!;
  }

  static Future<void> initialize() async {
    try {
      print('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL...');

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ö–æ—Å—Ç—ã
      final hosts = ['localhost', '10.0.2.2', '127.0.0.1'];
      Exception? lastException;

      for (final host in hosts) {
        try {
          print('üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $host...');

          _connection = PostgreSQLConnection(
            host,
            5432,
            'dart', // –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            username: 'postgres', // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            password: '1234', // –ø–∞—Ä–æ–ª—å
            timeoutInSeconds: 10, // —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
          );

          await _connection!.open();
          _isInitialized = true;
          print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ $host');
          return; // –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å

        } catch (e) {
          lastException = e as Exception?;
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $host: $e');
          await _connection?.close();
          _connection = null;
        }
      }

      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ö–æ—Å—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
      throw lastException ?? Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL');

    } catch (e) {
      print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $e');
      rethrow;
    }
  }

  static Future<void> close() async {
    await _connection?.close();
    _isInitialized = false;
    _connection = null;
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  static Future<bool> testConnection() async {
    try {
      final conn = await connection;
      final result = await conn.query('SELECT 1');
      return result.isNotEmpty;
    } catch (e) {
      return false;
    }
  }
}