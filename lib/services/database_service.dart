import 'package:postgres/postgres.dart';

class DatabaseService {
  static PostgreSQLConnection? _connection;
  static bool _isInitialized = false;
  static int _retryCount = 0;
  static const int _maxRetries = 3;
  static DateTime? _lastConnectionCheck;

  static Future<PostgreSQLConnection> get connection async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (_connection == null || _connection!.isClosed || !_isInitialized) {
      await _reconnect();
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤–æ–µ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (_shouldCheckConnection()) {
      final isAlive = await _checkConnectionHealth();
      if (!isAlive) {
        await _reconnect();
      }
    }

    return _connection!;
  }

  static bool _shouldCheckConnection() {
    if (_lastConnectionCheck == null) return true;
    return DateTime.now().difference(_lastConnectionCheck!) > Duration(seconds: 30);
  }

  static Future<bool> _checkConnectionHealth() async {
    try {
      await _connection!.query('SELECT 1');
      _lastConnectionCheck = DateTime.now();
      return true;
    } catch (e) {
      print('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ');
      return false;
    }
  }

  static Future<void> _reconnect() async {
    _retryCount = 0;
    _isInitialized = false;
    await initialize();
  }

  static Future<void> initialize() async {
    try {
      print('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL...');

      final hosts = ['localhost', '10.0.2.2', '127.0.0.1'];
      Exception? lastException;

      for (final host in hosts) {
        try {
          if (_retryCount >= _maxRetries) {
            throw Exception('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
          }

          print('üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${_retryCount + 1}/$_maxRetries - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ $host...');

          _connection = PostgreSQLConnection(
            host,
            5432,
            'dart',
            username: 'postgres',
            password: '1234',
            timeoutInSeconds: 10,
            queryTimeoutInSeconds: 15,
          );

          await _connection!.open();
          _isInitialized = true;
          _retryCount = 0;
          _lastConnectionCheck = DateTime.now();

          print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ $host');
          return;

        } catch (e) {
          _retryCount++;
          lastException = e as Exception?;
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $host: $e');
          await _connection?.close();
          _connection = null;

          if (_retryCount < _maxRetries) {
            await Future.delayed(Duration(seconds: 2));
          }
        }
      }

      throw lastException ?? Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL');

    } catch (e) {
      print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $e');
      _isInitialized = false;
      rethrow;
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î
  static Future<bool> get isAvailable async {
    try {
      final conn = await connection;
      await conn.query('SELECT 1');
      return true;
    } catch (e) {
      return false;
    }
  }

  static Future<bool> testConnection() async {
    try {
      final conn = await connection;
      final result = await conn.query('SELECT 1');
      return result.isNotEmpty;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      return false;
    }
  }

  static Future<bool> isConnectionAlive() async {
    try {
      if (_connection == null || _connection!.isClosed) {
        return false;
      }
      await _connection!.query('SELECT 1');
      _lastConnectionCheck = DateTime.now();
      return true;
    } catch (e) {
      print('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ: $e');
      _isInitialized = false;
      return false;
    }
  }

  static Future<void> close() async {
    await _connection?.close();
    _isInitialized = false;
    _connection = null;
    _retryCount = 0;
    _lastConnectionCheck = null;
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}