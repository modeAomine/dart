class AppError implements Exception {
  final String message;
  final ErrorType type;

  AppError(this.message, {this.type = ErrorType.unknown});

  @override
  String toString() => message;
}

enum ErrorType {
  network,      // –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  database,     // –ü—Ä–æ–±–ª–µ–º—ã —Å –ë–î
  authentication, // –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  validation,   // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  server,       // –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  unknown       // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
}

class ErrorHandler {
  static AppError handleError(dynamic error) {
    print('üî¥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: $error');

    if (error is AppError) {
      return error;
    }

    final errorString = error.toString().toLowerCase();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if (errorString.contains('connection') ||
        errorString.contains('network') ||
        errorString.contains('socket') ||
        errorString.contains('host') ||
        errorString.contains('internet')) {
      return AppError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', type: ErrorType.network);
    }

    if (errorString.contains('postgresql') ||
        errorString.contains('database') ||
        errorString.contains('connection is not open') ||
        errorString.contains('timeout')) {
      return AppError('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', type: ErrorType.database);
    }

    if (errorString.contains('password') ||
        errorString.contains('auth') ||
        errorString.contains('user') ||
        errorString.contains('login')) {
      return AppError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', type: ErrorType.authentication);
    }

    return AppError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', type: ErrorType.unknown);
  }

  static String getUserFriendlyMessage(AppError error) {
    switch (error.type) {
      case ErrorType.network:
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
      case ErrorType.database:
        return '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      case ErrorType.authentication:
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
      case ErrorType.validation:
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
      case ErrorType.server:
        return '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
      case ErrorType.unknown:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
  }
}